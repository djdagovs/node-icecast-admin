// Generated by CoffeeScript 1.6.2
(function() {
  var Admin,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Admin = (function() {
    function Admin(options) {
      this.options = options;
      this.killSource = __bind(this.killSource, this);
      this.killClient = __bind(this.killClient, this);
      this.moveCLients = __bind(this.moveCLients, this);
      this.updateFallback = __bind(this.updateFallback, this);
      this.updateMetadata = __bind(this.updateMetadata, this);
      this.listClients = __bind(this.listClients, this);
      this.listMounts = __bind(this.listMounts, this);
      this.stats = __bind(this.stats, this);
      this.fetchAndParse = __bind(this.fetchAndParse, this);
      this.parseXml = __bind(this.parseXml, this);
      this.fetchXml = __bind(this.fetchXml, this);
      this.handleOptions = __bind(this.handleOptions, this);
      this.handleOptions();
      this.http = require('http');
    }

    Admin.prototype.handleOptions = function() {
      var host, key, value, _base, _base1, _base10, _base11, _base2, _base3, _base4, _base5, _base6, _base7, _base8, _base9, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;

      if (this.options.url != null) {
        _ref = require('url').parse(this.options.url);
        for (key in _ref) {
          value = _ref[key];
          if ((_ref1 = (_base = this.options)[key]) == null) {
            _base[key] = value;
          }
        }
      }
      if (this.options.auth != null) {
        _ref2 = this.options.auth.split(':'), this.options.username = _ref2[0], this.options.password = _ref2[1];
      }
      if (this.options.ssl != null) {
        if ((_ref3 = (_base1 = this.options).protocol) == null) {
          _base1.protocol = 'https:';
        }
      }
      if ((_ref4 = (_base2 = this.options).host) == null) {
        _base2.host = this.options.hostname;
      }
      host = this.options.host.split(':');
      if ((_ref5 = (_base3 = this.options).hostname) == null) {
        _base3.hostname = host[0];
      }
      if ((_ref6 = (_base4 = this.options).port) == null) {
        _base4.port = host[1];
      }
      if ((_ref7 = (_base5 = this.options).username) == null) {
        _base5.username = 'admin';
      }
      if ((_ref8 = (_base6 = this.options).protocol) == null) {
        _base6.protocol = 'http:';
      }
      if ((_ref9 = (_base7 = this.options).timeout) == null) {
        _base7.timeout = 3000;
      }
      if ((_ref10 = (_base8 = this.options).port) == null) {
        _base8.port = this.options.protocol === 'https:' ? 443 : 80;
      }
      this.options.port = parseInt(this.options.port);
      if ((_ref11 = (_base9 = this.options).path) == null) {
        _base9.path = '/';
      }
      if ((_ref12 = (_base10 = this.options).pathname) == null) {
        _base10.pathname = this.options.path;
      }
      this.options.host = "" + this.options.hostname + ":" + this.options.port;
      if ((_ref13 = (_base11 = this.options).verbose) == null) {
        _base11.verbose = false;
      }
      delete this.options.href;
      delete this.options.url;
      delete this.options.slashes;
      return delete this.options.auth;
    };

    Admin.prototype.fetchXml = function(path, fn) {
      var client, fullpath,
        _this = this;

      if (fn == null) {
        fn = null;
      }
      fullpath = "" + this.options.path + path;
      if (this.options.verbose) {
        console.info("Fetching " + fullpath);
      }
      client = this.http.request({
        host: this.options.hostname,
        port: this.options.port,
        method: 'GET',
        path: fullpath,
        headers: {
          'Host': this.options.hostname,
          'Authorization': 'Basic ' + new Buffer("" + this.options.username + ":" + this.options.password).toString('base64')
        }
      });
      client.on('error', function(err) {
        return fn(err, {});
      });
      client.on('socket', function(socket) {
        socket.setTimeout(_this.options.timeout);
        return socket.on('timeout', function() {
          return client.abort();
        });
      });
      client.on('response', function(response) {
        var buffer;

        if (response.statusCode !== 200) {
          return fn({
            "code": "BADSTATUSCODE",
            "message": response.statusCode
          }, {});
        }
        buffer = '';
        response.on('data', function(chunk) {
          return buffer += chunk;
        });
        return response.on('end', function() {
          if (fn) {
            return fn(null, buffer);
          }
        });
      });
      return client.end();
    };

    Admin.prototype.parseXml = function(buffer, fn) {
      var x2js;

      if (fn == null) {
        fn = null;
      }
      x2js = new (require('xml2js')).Parser({});
      x2js.on('end', function(result) {
        return fn(null, result);
      });
      return x2js.parseString(buffer);
    };

    Admin.prototype.fetchAndParse = function(path, fn) {
      var _this = this;

      if (fn == null) {
        fn = null;
      }
      return this.fetchXml(path, function(err, buffer) {
        if (err) {
          return fn(err, {});
        }
        return _this.parseXml(buffer, function(err, object) {
          if (err) {
            return fn(err, object);
          }
          return fn(null, object);
        });
      });
    };

    Admin.prototype.stats = function(fn) {
      var _this = this;

      if (fn == null) {
        fn = null;
      }
      return this.fetchAndParse("admin/stats", function(err, object) {
        var _ref, _ref1;

        if (((_ref = object.icestats) != null ? (_ref1 = _ref.source) != null ? _ref1[0] : void 0 : void 0) == null) {
          return fn({
            "code": 'INVALID XML'
          }, object);
        }
        return fn(null, object);
      });
    };

    Admin.prototype.listMounts = function(fn) {
      var _this = this;

      if (fn == null) {
        fn = null;
      }
      return this.fetchAndParse("admin/listmounts", function(err, object) {
        var _ref, _ref1;

        if (((_ref = object.icestats) != null ? (_ref1 = _ref.source) != null ? _ref1[0] : void 0 : void 0) == null) {
          return fn({
            "code": 'INVALID XML'
          }, object);
        }
        return fn(null, object);
      });
    };

    Admin.prototype.listClients = function(mountpoint, fn) {
      var _this = this;

      if (fn == null) {
        fn = null;
      }
      return this.fetchAndParse("admin/listclients?mount=" + mountpoint, function(err, object) {
        var _ref, _ref1;

        if (((_ref = object.icestats) != null ? (_ref1 = _ref.source) != null ? _ref1[0] : void 0 : void 0) == null) {
          return fn({
            "code": 'INVALID XML'
          }, object);
        }
        return fn(null, object);
      });
    };

    Admin.prototype.updateMetadata = function(options, fn) {
      var _this = this;

      if (fn == null) {
        fn = null;
      }
      if (options.mount == null) {
        return fn({
          "BADPARAMS": "BADPARAMS"
        }, {});
      }
      if (options.song == null) {
        return fn({
          "BADPARAMS": "BADPARAMS"
        }, {});
      }
      return this.fetchAndParse("admin/metadata?mount=" + options.mount + "&mode=updinfo&song=" + (encodeURI(options.song)), function(err, object) {
        var _ref, _ref1;

        if (((_ref = object.iceresponse) != null ? (_ref1 = _ref.message) != null ? _ref1[0] : void 0 : void 0) == null) {
          return fn({
            "code": "INVALID XML"
          }, object);
        }
        return fn(err, object);
      });
    };

    Admin.prototype.updateFallback = function(options, fn) {
      var _this = this;

      if (fn == null) {
        fn = null;
      }
      if (options.mount == null) {
        return fn({
          "BADPARAMS": "BADPARAMS"
        }, {});
      }
      if (options.fallback == null) {
        return fn({
          "BADPARAMS": "BADPARAMS"
        }, {});
      }
      return this.fetchAndParse("admin/fallbacks?mount=" + options.mount + "&fallback=" + options.fallback, function(err, object) {
        var _ref;

        if (((_ref = object.html) != null ? _ref.head : void 0) == null) {
          return fn({
            "code": "FAILED"
          }, object);
        }
        return fn(err, object);
      });
    };

    Admin.prototype.moveCLients = function() {
      return console.log("TODO");
    };

    Admin.prototype.killClient = function() {
      return console.log("TODO");
    };

    Admin.prototype.killSource = function() {
      return console.log("TODO");
    };

    return Admin;

  })();

  module.exports = Admin;

}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
  var Admin, server, servers, _fn, _i, _len;

  process.stdout.write('\u001B[2J\u001B[0;0f');

  Admin = require('icecast-admin').Admin;

  servers = require(process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'] + '/.icecast-servers.json');

  _fn = function() {
    var admin;

    admin = new Admin({
      url: server,
      verbose: true
    });
    return admin.listMounts(function(err, mountsRoot) {
      var entry, _j, _len1, _ref, _results;

      if (err) {
        return console.log('Error:', err);
      }
      _ref = mountsRoot.icestats.source;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        entry = _ref[_j];
        if (parseInt(entry.listeners[0]) > 0) {
          _results.push((function() {
            var mountpoint;

            mountpoint = entry.$.mount;
            return admin.listClients(mountpoint, function(err, result) {
              var listener, source, _k, _len2, _ref1, _results1;

              if (err) {
                return console.log('Error:', err);
              }
              source = result.icestats.source[0];
              if (source.Listeners > 0) {
                _ref1 = source.listener;
                _results1 = [];
                for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                  listener = _ref1[_k];
                  _results1.push(console.log("Server=" + server + ", Mountpoint=" + mountpoint + ", ID=" + listener.ID + ", IP=" + listener.IP + ", Connected=" + listener.Connected + ", UserAgent=" + listener.UserAgent));
                }
                return _results1;
              }
            });
          })());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
  };
  for (_i = 0, _len = servers.length; _i < _len; _i++) {
    server = servers[_i];
    _fn();
  }

}).call(this);

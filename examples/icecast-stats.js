// Generated by CoffeeScript 1.6.2
(function() {
  var Admin, Table, counter, lines, server, servers, table, total, _fn, _i, _len,
    __hasProp = {}.hasOwnProperty;

  servers = require(process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'] + '/.icecast-servers.json');

  Admin = require('icecast-admin').Admin;

  Table = require('cli-table');

  total = {
    client_connections: 0,
    clients: 0,
    connections: 0,
    listener_connections: 0,
    listeners: 0
  };

  table = new Table({
    head: ["", "Client Connections", "Clients", "Connections", "Listener Connections", "Listeners"]
  });

  lines = [];

  counter = 0;

  _fn = function() {
    var admin;

    counter++;
    admin = new Admin({
      url: server
    });
    return admin.stats(function(err, data) {
      var key, line, row, val, value, _j, _len1;

      if (err) {
        return console.log('error:', err);
      } else {
        line = {};
        row = line[admin.options.hostname.toString()] = [];
        for (key in total) {
          value = total[key];
          val = parseInt(data.icestats[key][0]);
          total[key] += val;
          row.push(val);
        }
        lines.push(line);
        if (!--counter) {
          lines = lines.sort(function(a, b) {
            var a_key, a_value, b_key, b_value;

            for (a_key in a) {
              if (!__hasProp.call(a, a_key)) continue;
              a_value = a[a_key];
              for (b_key in b) {
                if (!__hasProp.call(b, b_key)) continue;
                b_value = b[b_key];
                return a_key.localeCompare(b_key);
              }
            }
          });
          for (_j = 0, _len1 = lines.length; _j < _len1; _j++) {
            line = lines[_j];
            table.push(line);
          }
          line = {};
          row = line['Total'] = [];
          for (key in total) {
            value = total[key];
            row.push(value);
          }
          table.push(line);
          return console.log(table.toString());
        }
      }
    });
  };
  for (_i = 0, _len = servers.length; _i < _len; _i++) {
    server = servers[_i];
    _fn();
  }

}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
  var Admin, Table, counter, keys, lines, server, servers, table, verbose_keys, _fn, _i, _len,
    __hasProp = {}.hasOwnProperty;

  servers = require(process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'] + '/.icecast-servers.json');

  Admin = require('icecast-admin').Admin;

  Table = require('cli-table');

  keys = ['bitrate', 'channels', 'listener_peak', 'listeners', 'samplerate', 'slow_listeners', 'source_ip', 'total_bytes_read', 'total_bytes_sent'];

  verbose_keys = ['audio_info', 'public', 'genre', 'listenurl', 'max_listeners', 'title', 'server_description', 'server_name', 'server_type', 'server_url', 'stream_start', 'user_agent'];

  if (process.argv[2]) {
    keys = keys.concat(verbose_keys);
  }

  table = new Table({
    head: [""].concat(keys)
  });

  lines = [];

  counter = 0;

  _fn = function() {
    var admin;

    counter++;
    admin = new Admin({
      url: server
    });
    return admin.stats(function(err, data) {
      var key, line, row, source, val, _j, _k, _l, _len1, _len2, _len3, _ref;

      if (err) {
        return console.log('error:', err);
      } else {
        _ref = data.icestats.source;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          source = _ref[_j];
          line = {};
          row = line["" + (admin.options.hostname.toString()) + " - " + source.server_name[0]] = [];
          for (_k = 0, _len2 = keys.length; _k < _len2; _k++) {
            key = keys[_k];
            val = source[key][0];
            row.push(val);
          }
          lines.push(line);
        }
        if (!--counter) {
          lines = lines.sort(function(a, b) {
            var a_key, a_value, b_key, b_value;

            for (a_key in a) {
              if (!__hasProp.call(a, a_key)) continue;
              a_value = a[a_key];
              for (b_key in b) {
                if (!__hasProp.call(b, b_key)) continue;
                b_value = b[b_key];
                return a_key.localeCompare(b_key);
              }
            }
          });
          for (_l = 0, _len3 = lines.length; _l < _len3; _l++) {
            line = lines[_l];
            table.push(line);
          }
          return console.log(table.toString());
        }
      }
    });
  };
  for (_i = 0, _len = servers.length; _i < _len; _i++) {
    server = servers[_i];
    _fn();
  }

}).call(this);
